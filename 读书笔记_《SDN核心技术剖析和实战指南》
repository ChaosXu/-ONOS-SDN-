SDN(Software Defined Networking)--软件定义网络，是一种新兴的基于软件的网络架构及技术。
NFV(Network Function Virtualization)--网络功能虚拟化

SDN典型架构：应用层、控制层、基础设施层
	应用层--不同业务和应用
	控制层--处理数据平面资源的编排，维护网络拓扑、状态信息
	基础设施层--数据处理、转发、状态收集

南向接口--控制层与基础设施层接口（OpenFlow标准）（ForCES,PCE-P）
北向接口--应用层与控制层接口

OpenDayLight典型架构：网络应用、编排和服务层、控制平面层、数据平面网元、
数据平面网元：南向接口
控制平面层：基于REST的OpenDaylight API北向接口

SDN特性
	1.集中控制
	2.开放接口
	3.网络虚拟化

ACL(Access Control List)--访问控制列表

SDN核心理念--控制平面和转发平面的分离、支持全局的软件控制
实现方案：基于专用接口的方案、基于叠加网络的方案、基于开放协议的方案

基于专用接口方案：不改变传统网络的实现机制工作方式，升级改造操作系统，开发专用API，实现统一配置管理和下发(onePK)
基于叠加网络的方案：以现行的IP网络为基础，在其上建立叠加的逻辑网络，实现网络资源虚拟化，使得多个逻辑上彼此隔离的网络分区，及异构虚拟网络可以共存（解耦、独立、控制）（隧道技术）
基于开放协议的方案

SDN三层要求
	1.转发层--处理性能高
	2.控制层--控制逻辑周全，根据全局网络试图做出合理的资源调配决策
	3.应用层--提需求，完成任务

SDN交换机--负责具体数据转发处理的设备。收到数据包，匹配表项，相应处理。表项由远程控制器统一下发，南向接口OpenFlow传达
SDN控制器--负责整个网络运行，是提升SDN网络效率的关键（链路发现，拓扑管理，策略制定，表项下发）北向接口RESTAPI
OpenStack--可以工作在SDN应用层的云管理平台
标准南向接口--把单独的网络设备中的控制平面集中抽取到控制层，转发决策由控制层通过南向接口协议统一下发

传统网络交换设备架构中的两个平面
	1.转发平面--主要用于对每一个数据报文进行处理，使得他能够通过网络交换设备。大多采用专门的硬件实现，主要包括转发决策、背板、输出链路调度
	2.控制平面--主要用于对交换机的转发表或路由器的路由表进行管理，同时负责网络配置，系统管理方面的操作，与转发平面相比，运行频率较低，可以采用软件实现

转发决策(Forwarding Decision)--当数据报文到达SDN交换机后，数据包头中携带的信息会在交换机转发表中被查到，如果地址被找到了，那么对应的下一跳MAC地址就会被挂接在数据报文的最前端，同时IP数据报报文TTL递减1，并计算出一个新的校验和
背板(Backplane)--数据报文进而通过背板转发到SDN交换机对应的设备出端口。为了保证处理顺序，数据报文需要被加入到一个队列中等待。
输出链路调度(Output Link Scheduling)--当数据报文到达SDN交换机的设备出端口后，按照一定顺序等待，直到被发出到相应交换机输出链路上。FIFO

SDN具体实现的选择
	1.交换模式
		a.直通(Cut-Through):仅对前6个字节信息(目的MAC地址)接收和分析。具有最小的转发延迟，并不检查数据完整性
		b.零碎片(Fragment-Free):快速转发，对前64个字节进行接收和解析，再转发
		c.存储转发(Store-and-Forward):对整个内容接受和解析，建议SDN交换机采用
	2.背板设计（转发决策信息及中继管理信息）
		a.共享总线机制(Shared Bus):交换机入端口、出端口共享同一数据通路，并由集中仲裁器决定访问权归属。比较容易实现组播和广播
		b.交叉开关矩阵机制(Crossbar):纵横式交换矩阵，支持在交换机端口之间提供多个同时使用的数据通路，突破带宽限制
	3.缓冲机制
		a.端口缓冲:为每个端口提供一定数量的高速内存，不支持灵活调整
		b.共享内存:为所有端口提供可以同时访问的共享内存空间用于端口缓冲，将所有接收到的数据帧保存在内存池，动态分配共享内存
	4.数据转发(流表中各个表项的长度及其中包含的匹配域可自定义，不再适合采用预定义的硬件电路进行流表实现)
	(TCAM(Ternary Content Addressable Memory)--三态内容寻址存储器，成本高，功耗大)

OpenFlow(OpenFlow Switch Specification)=交换机、控制器、协议
OpenFlow v1.0
	1.流表
		a.流表是交换机的高速数据转发依据，是对数据转发功能的一种抽象
		b.包头域(数据包匹配)+计数器(统计匹配数据包个数)+动作(展示如何操作处理)
			--包头域:用于对交换机接收到的数据包的包头匹配
			入端口|源MAC地址|目的MAC地址|以太网类型|VLAN ID|VLAN优先级|源IP地址|目的IP地址|IP协议|IP TOS位|TCP/UDP源端口|TCP/UDP目的端口
			--计数器:对每张流表、每个数据流、每个设备端口、每个转发队列进行维护，统计相关信息
			--动作:由于缺少控制平面能力，操作不仅是转发，而需要详细说明处理，没有定义动作则默认丢弃
				..必备动作和可选动作
				..必备动作需要所有交换机默认支持，可选动作需要交换机告知控制器它所能支持的动作种类
				..必备动作（转发和丢弃）
					..转发ALL CONTROLLER LOCAL TABLE IN_PORT
				..可选动作（转发、排队、修改域）
					..转发NORMAL FLOOD
					..排队 转发到某个出端口对应的转发队列
					..修改域 VLAN_ID VALN优先级 剥离VLAN头 源MAC 目的MAC 源IPv4 目的IPv4 ToS位 源TCP/IP端口 目的TCP/IP端口
		c.专用交换机和使能交换机
			--专用只支持OF协议
			--使能支持混合协议
		d.匹配过程
			--首先按照物理端口对入端口进行匹配
			--然后按照第二层包头比较
				..0x8100对应VLAN包，继续查询VLAN ID 和PCP域
				..0x0806对应ARP包，继续查询源目IP地址
				..0x0800对应IP包，继续查询IP包头相关域，如果是TCP/UDP包，继续查询传输层端口，如果是ICMP包，继续查询Type和Code
				..分段数据包后续包，将传输层端口设为0继续查询
	2.安全通道
		a.控制器利用OpenFlow协议对交换机进行流表配置，通道是连接交换机和控制器的接口
		b.采用TLS(Transport Layer Security，安全传输层协议)技术
	3.OpenFlow协议
		a.三种信息类型:controller-to-switch asynchronous symmetric
		b.controller-to-switch
			--Features 在建立TIS会话时控制器发送给交换机，交换机应答自身支持的功能
			--Configuration 控制器设置或查询交换机上的配置参数，交换机应答查询信息
			--Modify-state 控制器管理交换机流表项和端口信息
			--Read-state 控制器向交换机请求统计信息
			--Send-packet 控制器通过交换机指定端口发出数据包
			--Barrier 控制器通过barrier请求及相应报文，确认相关信息已经被满足或收到完成操作的通知
		c.asynchronous
			--Packet-in 收到数据包没有匹配或指定发送到控制器，如果缓存多数据包先存缓存，如果不多则附带数据包发送
			--Flow-removed 流表项因为超时或收到修改删除命令被删除
			--Port-status 交换机端口状态发生改变
			--Error 通知问题
		d.symmetric 
			--Hello 发起建立连接
			--Echo 发起Echo，接受者恢复Echo reply，用来协商延迟，带宽，是否连接保持等参数
			--Vendor 预留
		e.协议交互过程
			--连接建立
				..控制器与交换机建立TLS隧道后，隧道中传递控制协议信息，无需流表
				..安全隧道建立后，双方必须首发HELLO消息给对方，携带本方支持的最高协议版本号，接收方采用双方均支持的最低的版本号通信
				..如果没有共同支持的协议版本则发送ERROR消息
			--连接中断
				..连接异常时交换机尝试连接备份控制器
				..多次尝试失败后，交换机进入紧急模式，并重置所有TCP连接
				..此时所有包匹配紧急模式表项，正常表项被删除
				..交换机刚启动时默认进入紧急模式
			--加密
				..安全通道采用TLS连接加密
				..启动交换机时尝试连接到控制器的6633TCP端口
				..双方通过交换证书进行认证
				..每个交换机至少配置两个证书，一个用来认证控制器，一个用来向控制器发出认证
			--生成树支持
				..交换机选择支持802.1d生成树协议
				..如果支持，所有相关包在查找流表之前应该先在本地进行传统生成树处理
				..支持生成树协议的交换机在FEATURES消息中设置STP支持位
				..需要所有物理端口支持，但虚拟端口不需要支持
				..生成树协议会设置端口状态，来限制发往FLOOD的数据包仅被转发到生成树指定的端口
				..已经指定了出端口的转发或发往ALL的数据包会忽略生成树所指定的端口，而按照规则的设置进行端口转发
				..如果交换机不支持生成树协议，则必须允许控制器指定洪泛时的端口状态
			--流表项修改
				..五种类型 
					..ADD 增加一个新流表项
					..MODIFY 修改所有匹配流表项
					..MODIFY_STRICT 修改严格匹配流表项
					..DELETE 删除匹配流表项
					..DELETE_STRICT 删除严格匹配的流表项
			--交换机移除流表项
				..两种情况
					..定时器计时结束
					..控制器发出删除表项命令
				..每个表项有一个idle_timeout定时器和一个hard_timeout定时器
				..idle_timeout定时器计算没有流量匹配的时间
				..hard_timeout定时器计算被插入表中的总时间
				..一旦到达时间期限，则自动删除表项，并发送一个流删除的消息
				..控制器可以下发DELETE,DELETE_STRICT等消息主动删除流表项

OpenFlow标准演进
	1.OpenFlow交换机架构
		控制器
		|
		|
		安全通道 组表
		流表->····->流表
	2.流表结构
		a.v1.1和v1.2
			--匹配域 计数器 指令
		b.v1.3后
			--匹配域 优先级 计数器 指令 超时定时器 Cookie
		c.匹配域 对数据包匹配，包括入端口，数据报包头，及由前一个表指定的可选的元数据
		d.优先级 流表项的匹配次序
		e.计数器 更新匹配数据包的计数
		f.指令 修改动作集或流水线处理
		g.超时定时器 一个流的最长有效时间或最大空闲时间
		f.Cookies 由控制器选择的不透明数据值，控制器用来过滤流统计数据，流改变和流删除，但处理数据包不可以用
	3.多流表
		a.多级流表，将流表进行特征提取，进而将匹配过程分解成多个步骤，形成流水线处理形式
		b.转发规则被组织在不同的OpenFlow流表中，属于同一个流表的规则则按照优先级顺序进行匹配
		c.数据包进入到交换机，从流表0开始匹配，后续处理中流表可以按次序从小到大越级，但不能前跳。流表将以优先级高低顺序与数据包匹配，成功匹配到流表项后首先更新改流表项对应的计数器记录的统计数据，然后根据流表项指令进行相关操作。当数据包已经处于最后一个流表时，对应动作集合中的所有动作指令将被执行。
		d.v1.3在每个表最后加上Table-miss项，指明数据包与其他流表都不匹配。该流表项优先级被设置为0
	4.组表
		a.组表结构==组标识符 组类型 计数器 动作桶
		b.组类型
			--所有all 执行所有动作桶中的动作，可用于组播或广播
			--选择select 执行该组中一个动作桶的动作，可用于多路径
			--间接indirect 执行该组中一个确定的动作桶中的动作
			--快速故障恢复fast failover 执行第一个具有有效活动端口的动作桶中的指令
	5.匹配域
	6.计数器变化
	7.指令和动作
		a.v1.1
			--可选指令
				..Apply-Actions 立即进行指定的动作，而不改变动作集合
				..Clear-Actions 在动作集合中立即清除所有动作
				..Write-Metadata metadata/mask 在元数据区域记录元数据
			--必备指令
				..Write-Actions 将指定动作添加到正在运行的动作集合中
				..Goto-Table next-table-id 转到流水线处理进程的下一张表的ID
		b.v1.3
			--Meter meter id 直接将包计量后丢弃
		c.对v1.0必备动作的完善
			--必备动作
				..Output用于将数据包输出到指定端口，与可选动作LOCAL合并执行，并由端口的属性决定其是否为可选
				..Drop无变化
				..Grop用于利用组表处理数据包
			--可选动作
				..Set-Queue 设置数据包队列ID，完成Qos功能
				..Push-Tag/Pop-Tag 用于VLAN,MPLA_Tag入栈和出栈
				..Set-Field 设置数据包头的类型和修改数据包头的值
				..Change-TTL 用于修改TTL值
		d.动作集合与数据包相关，最初一个空集合，每匹配一流表项，匹配项对应的指令都可能增加数据包的动作集合。当一个表项的指令集中没有包含Goto-Table指令时，流水线处理结束，动作集合中的动作指令按照一定顺序执行
	8.流表匹配流程
		报文输入从表0开始
			|-----------------------------------是
			|									|
			|									|
		在表n中匹配---是---更新，执行------转到表n
			|									|
			|									否
			否 									|
			|									执行动作集合
			|
		基于表配置，执行某一操作
		-发送到控制器
		-丢弃
		-继续下一个表项

		v1.3后
		报文输入从表0开始
			|-----------------------------------是
			|									|
			|									|
		在表n中匹配---是---更新，执行------转到表n
			|				|					|
			|				|					否
			否  			是					|
			|				|					|
			|				|					|
			存在Table-Miss项 					|
			|
			否									执行动作集合
			|
		基于表配置，执行某一操作
		-发送到控制器
		-丢弃
		-继续下一个表项
	9.安全通道
		建议缺省状态下使用TCP6633端口
	10.OpenFlow协议
		a.旧三种信息类型:controller-to-switch asynchronous symmetric
		b.controller-to-switch
			--Features 在建立TIS会话时控制器发送给交换机，交换机应答自身支持的功能
			--Configuration 控制器设置或查询交换机上的配置参数，交换机应答查询信息
			--Modify-state 控制器管理交换机流表项和端口信息
			--Read-state 控制器向交换机请求统计信息
			--Packet-out 控制器通过交换机指定端口发出数据包
			--Barrier 控制器通过barrier请求及相应报文，确认相关信息已经被满足或收到完成操作的通知
			--Role-Request 用于控制器向其OpenFlow通道设置或查询role
			--Asynchronous-Configuration 用于控制器设置或查询异步消息的附加过滤器，一般用于多控制器连接建立过程
		c.asynchronous
			--Packet-in 收到数据包没有匹配或指定发送到控制器，如果缓存多数据包先存缓存，如果不多则附带数据包发送
			--Flow-removed 流表项因为超时或收到修改删除命令被删除
			--Port-status 交换机端口状态发生改变
			--Error 通知问题
		d.symmetric 
			--Hello 发起建立连接
			--Echo 发起Echo，接受者恢复Echo reply，用来协商延迟，带宽，是否连接保持等参数
			--Experimenter 预留
	11.OpenFlow端口
		a.端口是OpenFlow进程和网络之间传递数据包的网络接口
		b.三种类型端口 物理端口 逻辑端口 保留端口
		c.物理端口 与交换机硬件接口一一对应，硬件虚拟化后一个物理端口可以对应交换机硬件接口的一个虚拟接口
		d.逻辑接口 交换机定义的端口，但并不直接对应一个交换机硬件接口。物理端口与逻辑端口唯一区别是：一个逻辑端口的数据包可能增加了一个额外的元数据字段即隧道ID，而当一个逻辑端口上接受到的报文被发送到控制器时，其逻辑端口和底层的物理端口都要报告给控制器
		e.保留端口 用于特定的转发动作，如发送到控制器，洪泛，或使用非OpenFlow的方法转发
		f.八种端口
			--必备端口
				..ALL:表示所有端口均可用于转发指定数据包，当其被用作输出端口时，数据包被复制转发除入端口及OFPPC_NO_FWD端口
				..CONTROLLER:到控制器的控制通道，用作一个出或入端口。用作出端口时，封装数据包中为数据包信息，用作一个入端口时确认来自控制器的数据包
				..TABLE:表示流水线开始，仅在输出行为时有效，此时交换机提交报文给第一流表
				..IN PORT:代表数据包进入端口，只有一种情况用于输出端口，即从入端口发送数据包
				..ANY:特定值，用在没有指定端口的情形，不能用于入端口和出端口
			--可选端口
				..LOCAL:表示交换机本地网络堆栈和管理堆栈，可入可出。使得远程实体可以与交换机通过OpenFlow网络交互，而不再需要单独的控制网络，通过配置一组合适的默认流表项，可以实现一个带内控制器的连接
				..NORMAL:传统非OpenFlow流水线处理，仅可用于普通流水线的输出端口，如果交换机不能从OpenFlow流水线转发数据包到普通流水线，必须标明它不支持这一动作
				..FLOOD:使用普通流水线处理洪泛过程，可用于出端口，除入端口或OFPPS_BLOCKED状态的端口，可以将数据包发往其他所有标准端口。
		g.可选类型只在OpenFlow使能交换机被支持
	12.IPv6支持
	13.多控制器
		a.初始化时交换机与一至多个配置好的控制器建立连接，这些控制器为主备关系，提供负载均衡能力和快速故障倒换
		b.增加角色(Role)信息用于控制器之间协商主备关系
		c.角色缺省情况下是EQUAL，可以响应交换机请求。也可以设为SLAVE，只监听不响应。第三种MASTER，系统只能有一个MASTER
	14.计量表(Meter Table)
		a.计量表结构：计量标识符 计量带 计数器
		b.计量标识符：32位无符号整数
		c.计量带：由计量带组成无序列表，每个计量带指明速率及处理数据包的方式
		d.计数器：用于在报文被计量表项处理时更新相关计数
		f.计量带结构：带类型 计量速率 计数器 类型参数
		g.计量带类型：定义了数据包怎样被处理
			--drop:通过丢弃数据包，定义带宽速率限制
			-dscp remark:降低数据包的IP头中的DSCP字段丢弃的优先级，可用于定义简单的DiffServ策略
		h.计量速率：用于选择计量带，定义带可以运行的最低速率
		i.计数器：当数据报文被计量带处理时，更新计数
		j.类型参数：带类型的可选参数
OpenFlow问题分析
	1.转发性能：基于可编程硬件
	2.流表规模：多流表技术
	3.控制器容量
	4.可靠性：多控制器方式
	5.版本协议兼容性

OF-CONFIG配置管理协议(OpenFlow Configuration and Management Protocol)
	1.OpenFlow定义的是SDN网络架构中一种南向接口，提出由控制器向OpenFlow交换机发送流表以控制数据流通过网络所经过的路径的方式
	2.OF-CONFIG本质是提供一个开放接口用于远程配置和控制OpenFlow交换机，不影响流表的内容和数据转发行为，对实时性没有要求
	3.OpenFlow上所有参与数据转发的软硬件(例如端口、队列等)都可以被视为网络资源，OF-CONFIG作用是对这些资源进行管理
	OpenFlow配置点				OpenFlow控制器
		|							|
		|							|
		OF-CONFIG 					OF-CONFIG
		|							|
		|							|
									OpenFlow交换机
		操作环境
	4.OF-CONFIG主要目标是实现以下基本功能配置
		a.配置一至多个控制器的IP地址
		b.配置设备的队列、端口等资源
		c.支持远程修改设备的端口状态

OF-CONFIG v1.0概述
	1.目标
		a.配置一至多个控制器的IP地址
		b.配置设备的队列、端口等资源
		c.支持远程修改设备的端口状态
	2.OF-CONFIGv1.0定义的OpenFlow v1.2功能配置需求
		a.控制器连接 支持在交换机上配置控制器参数
		b.多控制器 支持多个控制器的参数配置
		c.逻辑交换机 支持对逻辑交换机（openFlow交换机的实例）的资源设置，且支持带外设置
		d.连接中断 支持故障安全，故障脱机等两种应对模式的设置
		f.加密传输 支持控制器与交换机之间TSL隧道参数设置
		g.队列 支持队列参数设置，包括最小速率，最大速率，自定义参数等
		h.端口 支持交换机端口的参数和特征的配置
		i.数据通路标识 支持长度为64位的数据通路标识的配置，其中低48位是交换机的MAC地址，高16位由各设备生产厂家定义
	3.运维需求内容
		a.支持从多个配置点进行配置操作
		b.支持一个配置点配置和管理多个交换机
		c.支持由多台控制器控制同一台逻辑交换机
		d.支持对已分配给逻辑交换机的端口和队列的配置
	4.数据模型
		a.OpenFlow配置点---OpenFlow交换机
		b.OpenFlow控制器---OpenFlow逻辑交换机
		c.两类资源：OpenFlow端口和OpenFlow队列
	5.NETCONF：核心在消息层上定义一个操作集

OVS交换机
	1.Open vSwitch是一款基于软件实现的开源虚拟交换机
	2.控制器--Openflow协议--数据通路--（慢速通道，快速通道）
	3.数据转发通路(datapath)执行数据交换工作，负责从设备入端口接收数据包并依据流表信息对其进行管理
	4.OpenFlow协议支持则用于实现交换策略
	5.两种数据转发通路：完全工作在用户态
